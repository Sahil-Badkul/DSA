# Array

- Second largest array
    1. Naive approach through two loops. First find largest element then find second largest.
    2. Efficient approach by maintaining both simultaneously. Early largest become second largest and update largest.

- Reverse an array
    1. By two variables low and high then closes them to each other until they cross each one. TC: O(N), SC: (1)

- Check if array is sorted or not in increasing order
    1. Naive solution: Check smaller element is not present on RHS. TC : O(N^2).
    2. Efficient approach: for every element check if it is greater than previous element or not. TC: O(N)

- Remove duplicate from sorted array
    1. Naive approach: Make a distinct array and copy only distinct values in it. TC: O(N), SC: O(N).
    2. Make last element variable. TC: O(N), SC: O(1).    

Array indexing start 0
arr[]  =  1 2 3 4 5 
          1 2 _ 4 5
          1 2 4 5 _
access -> arr[2];
update -> arr[1] = 22;
O(1)
insert at last-> O(1)
Delete mid element in array -> O(n)

vector -> O(1)
insert 
Delete
access 
update